{"ast":null,"code":"const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n  return await resposta.json();\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n  return await resposta.json();\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n  const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n    // Passa o código do funcionário na URL\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": token\n    },\n    credentials: 'include'\n  });\n  return await resposta.json();\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n  const resposta = await fetch('https://sua-api.com/funcionarios', {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!resposta.ok) {\n    throw new Error('Erro ao consultar funcionários');\n  }\n  return resposta.json();\n}","map":{"version":3,"names":["urlBase","gravar","funcionario","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","json","alterar","excluir","codigoFuncionario","consultarTodos","Authorization","ok","Error"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/At_3/frontend/src/servicos/funcionarioService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"POST\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    return await resposta.json();\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"PUT\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    return await resposta.json();\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n    const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, { // Passa o código do funcionário na URL\n        method: \"DELETE\",\n        headers: { \n            \"Authorization\": token\n        },\n        credentials: 'include'\n    });\n    return await resposta.json();\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n    const resposta = await fetch('https://sua-api.com/funcionarios', {\n        method: 'GET',\n        headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'application/json',\n        },\n    });\n\n    if (!resposta.ok) {\n        throw new Error('Erro ao consultar funcionários');\n    }\n\n    return resposta.json();\n}\n\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,mCAAmC;;AAEnD;AACA,OAAO,eAAeC,MAAMA,CAACC,WAAW,EAAEC,KAAK,EAAE;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;EACpC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeC,OAAOA,CAACX,WAAW,EAAEC,KAAK,EAAE;EAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;EACpC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeE,OAAOA,CAACC,iBAAiB,EAAEZ,KAAK,EAAE;EACpD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIe,iBAAiB,EAAE,EAAE;IAAE;IAC9DT,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMJ,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeI,cAAcA,CAACb,KAAK,EAAE;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC7DC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACLU,aAAa,EAAE,UAAUd,KAAK,EAAE;MAChC,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACc,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACrD;EAEA,OAAOf,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}