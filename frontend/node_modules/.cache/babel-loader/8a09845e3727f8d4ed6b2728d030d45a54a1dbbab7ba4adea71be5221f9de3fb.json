{"ast":null,"code":"const urlBase = \"http://localhost:4000/departamento\";\nexport async function gravar(departamento, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(departamento)\n  });\n  return await resposta.json();\n}\nexport async function alterar(departamento, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(departamento)\n  });\n  return await resposta.json();\n}\nexport async function excluir(codigo, token) {\n  try {\n    const resposta = await fetch(`${urlBase}/${codigo}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}` // Adicione 'Bearer ' se estiver usando tokens JWT\n      },\n      credentials: 'include'\n    });\n\n    // Verificar se a resposta é um JSON válido\n    if (!resposta.ok) {\n      throw new Error(`Erro na resposta da API: ${resposta.status}`);\n    }\n    const dados = await resposta.json();\n    return dados;\n  } catch (erro) {\n    // Retornar uma mensagem de erro mais específica\n    return {\n      status: false,\n      mensagem: `Erro ao excluir o departamento: ${erro.message}`\n    };\n  }\n}\nexport async function consultarTodos(token) {\n  const resposta = await fetch(urlBase, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": token\n    },\n    credentials: 'include'\n  });\n  return await resposta.json();\n}","map":{"version":3,"names":["urlBase","gravar","departamento","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","json","alterar","excluir","codigo","ok","Error","status","dados","erro","mensagem","message","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/At_3/frontend/src/servicos/departamentoService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/departamento\";\n\nexport async function gravar(departamento, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"POST\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(departamento)\n    });\n    return await resposta.json();\n}\n\nexport async function alterar(departamento, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"PUT\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(departamento)\n    });\n    return await resposta.json();\n}\n\nexport async function excluir(codigo, token) {\n    try {\n        const resposta = await fetch(`${urlBase}/${codigo}`, {\n            method: \"DELETE\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}` // Adicione 'Bearer ' se estiver usando tokens JWT\n            },\n            credentials: 'include',\n        });\n\n        // Verificar se a resposta é um JSON válido\n        if (!resposta.ok) {\n            throw new Error(`Erro na resposta da API: ${resposta.status}`);\n        }\n\n        const dados = await resposta.json();\n        return dados;\n    } catch (erro) {\n        // Retornar uma mensagem de erro mais específica\n        return { status: false, mensagem: `Erro ao excluir o departamento: ${erro.message}` };\n    }\n}\nexport async function consultarTodos(token) {\n    const resposta = await fetch(urlBase, {\n        method: \"GET\",\n        headers: { \n            \"Authorization\": token\n        },\n        credentials: 'include'\n    });\n    return await resposta.json();\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,oCAAoC;AAEpD,OAAO,eAAeC,MAAMA,CAACC,YAAY,EAAEC,KAAK,EAAE;EAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;EACrC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;AAEA,OAAO,eAAeC,OAAOA,CAACX,YAAY,EAAEC,KAAK,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;EACrC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;AAEA,OAAO,eAAeE,OAAOA,CAACC,MAAM,EAAEZ,KAAK,EAAE;EACzC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIe,MAAM,EAAE,EAAE;MACjDT,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;MACvC,CAAC;MACDK,WAAW,EAAE;IACjB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACJ,QAAQ,CAACY,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,4BAA4Bb,QAAQ,CAACc,MAAM,EAAE,CAAC;IAClE;IAEA,MAAMC,KAAK,GAAG,MAAMf,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACnC,OAAOO,KAAK;EAChB,CAAC,CAAC,OAAOC,IAAI,EAAE;IACX;IACA,OAAO;MAAEF,MAAM,EAAE,KAAK;MAAEG,QAAQ,EAAE,mCAAmCD,IAAI,CAACE,OAAO;IAAG,CAAC;EACzF;AACJ;AACA,OAAO,eAAeC,cAAcA,CAACpB,KAAK,EAAE;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMJ,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}