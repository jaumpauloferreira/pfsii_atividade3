{"ast":null,"code":"const urlBase = \"http://localhost:4000/departamento\";\n\n// Função para criar um novo departamento\nexport async function gravar(departamento, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}` // Incluindo o prefixo Bearer\n      },\n      credentials: 'include',\n      body: JSON.stringify(departamento)\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(\"Erro ao gravar departamento:\", erro);\n    throw erro;\n  }\n}\n\n// Função para atualizar um departamento existente\nexport async function alterar(departamento, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}` // Incluindo o prefixo Bearer\n      },\n      credentials: 'include',\n      body: JSON.stringify(departamento)\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(\"Erro ao alterar departamento:\", erro);\n    throw erro;\n  }\n}\n\n// Função para excluir um departamento existente\nexport async function excluir(codigo, token) {\n  try {\n    const resposta = await fetch(`${urlBase}/${codigo}`, {\n      // Enviar o código no URL\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}` // Incluindo o prefixo Bearer\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(\"Erro ao excluir departamento:\", erro);\n    throw erro;\n  }\n}\n\n// Função para consultar todos os departamentos\nexport async function consultarTodos(token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": `Bearer ${token}` // Incluindo o prefixo Bearer\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(\"Erro ao consultar departamentos:\", erro);\n    throw erro;\n  }\n}","map":{"version":3,"names":["urlBase","gravar","departamento","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","status","statusText","json","erro","console","error","alterar","excluir","codigo","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/At_3/frontend/src/servicos/departamentoService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/departamento\";\n\n// Função para criar um novo departamento\nexport async function gravar(departamento, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`  // Incluindo o prefixo Bearer\n            },\n            credentials: 'include',\n            body: JSON.stringify(departamento)\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(\"Erro ao gravar departamento:\", erro);\n        throw erro;\n    }\n}\n\n// Função para atualizar um departamento existente\nexport async function alterar(departamento, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"PUT\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`  // Incluindo o prefixo Bearer\n            },\n            credentials: 'include',\n            body: JSON.stringify(departamento)\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(\"Erro ao alterar departamento:\", erro);\n        throw erro;\n    }\n}\n\n// Função para excluir um departamento existente\nexport async function excluir(codigo, token) {\n    try {\n        const resposta = await fetch(`${urlBase}/${codigo}`, {  // Enviar o código no URL\n            method: \"DELETE\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`  // Incluindo o prefixo Bearer\n            },\n            credentials: 'include'\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(\"Erro ao excluir departamento:\", erro);\n        throw erro;\n    }\n}\n\n// Função para consultar todos os departamentos\nexport async function consultarTodos(token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"GET\",\n            headers: { \n                \"Authorization\": `Bearer ${token}`  // Incluindo o prefixo Bearer\n            },\n            credentials: 'include'\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ${resposta.status}: ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(\"Erro ao consultar departamentos:\", erro);\n        throw erro;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}