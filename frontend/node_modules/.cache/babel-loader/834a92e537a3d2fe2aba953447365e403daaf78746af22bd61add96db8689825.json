{"ast":null,"code":"const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      credentials: 'include',\n      body: JSON.stringify(funcionario)\n    });\n    if (!resposta.ok) {\n      throw new Error('Erro ao gravar funcionário');\n    }\n    return await resposta.json();\n  } catch (error) {\n    console.error('Erro:', error);\n    throw error; // Propaga o erro para o chamador\n  }\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      credentials: 'include',\n      body: JSON.stringify(funcionario)\n    });\n    if (!resposta.ok) {\n      throw new Error('Erro ao alterar funcionário');\n    }\n    return await resposta.json();\n  } catch (error) {\n    console.error('Erro:', error);\n    throw error; // Propaga o erro para o chamador\n  }\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n  try {\n    const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": token\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error('Erro ao excluir funcionário');\n    }\n    return await resposta.json();\n  } catch (error) {\n    console.error('Erro:', error);\n    throw error; // Propaga o erro para o chamador\n  }\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": token\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error('Erro ao consultar funcionários');\n    }\n    return await resposta.json();\n  } catch (error) {\n    console.error('Erro:', error);\n    throw error; // Propaga o erro para o chamador\n  }\n}","map":{"version":3,"names":["urlBase","gravar","funcionario","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","json","error","console","alterar","excluir","codigoFuncionario","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/At_3/frontend/src/servicos/funcionarioService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": token\n            },\n            credentials: 'include',\n            body: JSON.stringify(funcionario)\n        });\n        \n        if (!resposta.ok) {\n            throw new Error('Erro ao gravar funcionário');\n        }\n        \n        return await resposta.json();\n    } catch (error) {\n        console.error('Erro:', error);\n        throw error; // Propaga o erro para o chamador\n    }\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"PUT\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": token\n            },\n            credentials: 'include',\n            body: JSON.stringify(funcionario)\n        });\n        \n        if (!resposta.ok) {\n            throw new Error('Erro ao alterar funcionário');\n        }\n        \n        return await resposta.json();\n    } catch (error) {\n        console.error('Erro:', error);\n        throw error; // Propaga o erro para o chamador\n    }\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n    try {\n        const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n            method: \"DELETE\",\n            headers: { \n                \"Authorization\": token\n            },\n            credentials: 'include'\n        });\n        \n        if (!resposta.ok) {\n            throw new Error('Erro ao excluir funcionário');\n        }\n        \n        return await resposta.json();\n    } catch (error) {\n        console.error('Erro:', error);\n        throw error; // Propaga o erro para o chamador\n    }\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"GET\",\n            headers: { \n                \"Authorization\": token\n            },\n            credentials: 'include'\n        });\n        \n        if (!resposta.ok) {\n            throw new Error('Erro ao consultar funcionários');\n        }\n        \n        return await resposta.json();\n    } catch (error) {\n        console.error('Erro:', error);\n        throw error; // Propaga o erro para o chamador\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}