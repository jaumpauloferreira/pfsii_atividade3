{"ast":null,"code":"const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para lidar com a resposta da API\nasync function handleResponse(resposta) {\n  const dados = await resposta.json();\n  if (!resposta.ok) {\n    console.error('Erro na resposta:', dados); // Adicionado para logar a resposta de erro\n    throw new Error(dados.message || 'Erro ao processar a requisição.');\n  }\n  return dados;\n}\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n  console.log(\"Dados a enviar:\", funcionario); // Adicionado para debug\n  const resposta = await fetch(urlBase, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n\n  // Verifique a resposta do servidor\n  if (!resposta.ok) {\n    const errorData = await resposta.json();\n    console.error(\"Erro na requisição:\", errorData); // Adicionado para logar o erro\n    throw new Error(errorData.message || \"Erro ao processar a requisição.\");\n  }\n  return await resposta.json();\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n  return await handleResponse(resposta);\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n  const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  return await handleResponse(resposta);\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n  const resposta = await fetch(urlBase, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  return await handleResponse(resposta);\n}","map":{"version":3,"names":["urlBase","handleResponse","resposta","dados","json","ok","console","error","Error","message","gravar","funcionario","token","log","fetch","method","headers","credentials","body","JSON","stringify","errorData","alterar","excluir","codigoFuncionario","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/pfsii_atividade3/frontend/src/servicos/funcionarioService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para lidar com a resposta da API\nasync function handleResponse(resposta) {\n    const dados = await resposta.json();\n    if (!resposta.ok) {\n        console.error('Erro na resposta:', dados); // Adicionado para logar a resposta de erro\n        throw new Error(dados.message || 'Erro ao processar a requisição.');\n    }\n    return dados;\n}\n\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n    console.log(\"Dados a enviar:\", funcionario); // Adicionado para debug\n    const resposta = await fetch(urlBase, {\n        method: \"POST\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    \n    // Verifique a resposta do servidor\n    if (!resposta.ok) {\n        const errorData = await resposta.json();\n        console.error(\"Erro na requisição:\", errorData); // Adicionado para logar o erro\n        throw new Error(errorData.message || \"Erro ao processar a requisição.\");\n    }\n\n    return await resposta.json();\n}\n\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"PUT\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    return await handleResponse(resposta);\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n    const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n        method: \"DELETE\",\n        headers: { \n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include'\n    });\n    return await handleResponse(resposta);\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n    const resposta = await fetch(urlBase, {\n        method: \"GET\",\n        headers: { \n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include'\n    });\n    return await handleResponse(resposta);\n}\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,mCAAmC;;AAEnD;AACA,eAAeC,cAAcA,CAACC,QAAQ,EAAE;EACpC,MAAMC,KAAK,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EACnC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACdC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEJ,KAAK,CAAC,CAAC,CAAC;IAC3C,MAAM,IAAIK,KAAK,CAACL,KAAK,CAACM,OAAO,IAAI,iCAAiC,CAAC;EACvE;EACA,OAAON,KAAK;AAChB;;AAGA;AACA,OAAO,eAAeO,MAAMA,CAACC,WAAW,EAAEC,KAAK,EAAE;EAC7CN,OAAO,CAACO,GAAG,CAAC,iBAAiB,EAAEF,WAAW,CAAC,CAAC,CAAC;EAC7C,MAAMT,QAAQ,GAAG,MAAMY,KAAK,CAACd,OAAO,EAAE;IAClCe,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;EACpC,CAAC,CAAC;;EAEF;EACA,IAAI,CAACT,QAAQ,CAACG,EAAE,EAAE;IACd,MAAMgB,SAAS,GAAG,MAAMnB,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvCE,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEc,SAAS,CAAC,CAAC,CAAC;IACjD,MAAM,IAAIb,KAAK,CAACa,SAAS,CAACZ,OAAO,IAAI,iCAAiC,CAAC;EAC3E;EAEA,OAAO,MAAMP,QAAQ,CAACE,IAAI,CAAC,CAAC;AAChC;;AAGA;AACA,OAAO,eAAekB,OAAOA,CAACX,WAAW,EAAEC,KAAK,EAAE;EAC9C,MAAMV,QAAQ,GAAG,MAAMY,KAAK,CAACd,OAAO,EAAE;IAClCe,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,KAAK;IACpC,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;EACpC,CAAC,CAAC;EACF,OAAO,MAAMV,cAAc,CAACC,QAAQ,CAAC;AACzC;;AAEA;AACA,OAAO,eAAeqB,OAAOA,CAACC,iBAAiB,EAAEZ,KAAK,EAAE;EACpD,MAAMV,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGd,OAAO,IAAIwB,iBAAiB,EAAE,EAAE;IAC5DT,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUJ,KAAK;IACpC,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMhB,cAAc,CAACC,QAAQ,CAAC;AACzC;;AAEA;AACA,OAAO,eAAeuB,cAAcA,CAACb,KAAK,EAAE;EACxC,MAAMV,QAAQ,GAAG,MAAMY,KAAK,CAACd,OAAO,EAAE;IAClCe,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUJ,KAAK;IACpC,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMhB,cAAc,CAACC,QAAQ,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}