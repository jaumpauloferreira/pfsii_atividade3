{"ast":null,"code":"const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para lidar com a resposta da API\nasync function handleResponse(resposta) {\n  if (!resposta.ok) {\n    const erro = await resposta.json();\n    throw new Error(erro.message || 'Erro ao processar a requisição.');\n  }\n  return await resposta.json();\n}\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n  return await handleResponse(resposta);\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include',\n    body: JSON.stringify(funcionario)\n  });\n  return await handleResponse(resposta);\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n  const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  return await handleResponse(resposta);\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n  const resposta = await fetch(urlBase, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    },\n    credentials: 'include'\n  });\n  return await handleResponse(resposta);\n}","map":{"version":3,"names":["urlBase","handleResponse","resposta","ok","erro","json","Error","message","gravar","funcionario","token","fetch","method","headers","credentials","body","JSON","stringify","alterar","excluir","codigoFuncionario","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/pfsii_atividade3/frontend/src/servicos/funcionarioService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para lidar com a resposta da API\nasync function handleResponse(resposta) {\n    if (!resposta.ok) {\n        const erro = await resposta.json();\n        throw new Error(erro.message || 'Erro ao processar a requisição.');\n    }\n    return await resposta.json();\n}\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"POST\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    return await handleResponse(resposta);\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"PUT\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include',\n        body: JSON.stringify(funcionario)\n    });\n    return await handleResponse(resposta);\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n    const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n        method: \"DELETE\",\n        headers: { \n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include'\n    });\n    return await handleResponse(resposta);\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n    const resposta = await fetch(urlBase, {\n        method: \"GET\",\n        headers: { \n            \"Authorization\": `Bearer ${token}`\n        },\n        credentials: 'include'\n    });\n    return await handleResponse(resposta);\n}\n\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,mCAAmC;;AAEnD;AACA,eAAeC,cAAcA,CAACC,QAAQ,EAAE;EACpC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IACd,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,IAAI,iCAAiC,CAAC;EACtE;EACA,OAAO,MAAML,QAAQ,CAACG,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeG,MAAMA,CAACC,WAAW,EAAEC,KAAK,EAAE;EAC7C,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACX,OAAO,EAAE;IAClCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IACDI,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;EACpC,CAAC,CAAC;EACF,OAAO,MAAMR,cAAc,CAACC,QAAQ,CAAC;AACzC;;AAEA;AACA,OAAO,eAAegB,OAAOA,CAACT,WAAW,EAAEC,KAAK,EAAE;EAC9C,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACX,OAAO,EAAE;IAClCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IACDI,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;EACpC,CAAC,CAAC;EACF,OAAO,MAAMR,cAAc,CAACC,QAAQ,CAAC;AACzC;;AAEA;AACA,OAAO,eAAeiB,OAAOA,CAACC,iBAAiB,EAAEV,KAAK,EAAE;EACpD,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAAC,GAAGX,OAAO,IAAIoB,iBAAiB,EAAE,EAAE;IAC5DR,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IACDI,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMb,cAAc,CAACC,QAAQ,CAAC;AACzC;;AAEA;AACA,OAAO,eAAemB,cAAcA,CAACX,KAAK,EAAE;EACxC,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACX,OAAO,EAAE;IAClCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IACDI,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMb,cAAc,CAACC,QAAQ,CAAC;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}