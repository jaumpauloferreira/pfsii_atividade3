{"ast":null,"code":"const urlBase = \"http://localhost:4000/departamento\";\nexport async function gravar(departamento, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(departamento)\n  });\n  return await resposta.json();\n}\nexport async function alterar(departamento, token) {\n  const resposta = await fetch(urlBase, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": token\n    },\n    credentials: 'include',\n    body: JSON.stringify(departamento)\n  });\n  return await resposta.json();\n}\nexport async function excluir(codigo, token) {\n  const resposta = await fetch(`${urlBase}/${codigo}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Authorization\": token\n    },\n    credentials: 'include'\n  });\n  return await resposta.json();\n}\n\n// Função consultarTodos - Agora exportada\nexport async function consultarTodos(token) {\n  const resposta = await fetch(urlBase, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": token\n    },\n    credentials: 'include'\n  });\n  return await resposta.json();\n}\nexport async function buscarDepartamentos(token) {\n  const resposta = await fetch(urlBase, {\n    method: \"GET\",\n    headers: {\n      \"Authorization\": token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!resposta.ok) {\n    throw new Error(\"Erro ao buscar departamentos\");\n  }\n  return await resposta.json();\n}","map":{"version":3,"names":["urlBase","gravar","departamento","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","json","alterar","excluir","codigo","consultarTodos","buscarDepartamentos","ok","Error"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/pfsii_atividade3/frontend/src/servicos/departamentoService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/departamento\";\n\nexport async function gravar(departamento, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"POST\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(departamento)\n    });\n    return await resposta.json();\n}\n\nexport async function alterar(departamento, token) {\n    const resposta = await fetch(urlBase, {\n        method: \"PUT\",\n        headers: { \n            \"Content-Type\": \"application/json\",\n            \"Authorization\": token\n        },\n        credentials: 'include',\n        body: JSON.stringify(departamento)\n    });\n    return await resposta.json();\n}\n\nexport async function excluir(codigo, token) {\n    const resposta = await fetch(`${urlBase}/${codigo}`, {\n        method: \"DELETE\",\n        headers: { \n            \"Authorization\": token\n        },\n        credentials: 'include'\n    });\n    return await resposta.json();\n}\n\n// Função consultarTodos - Agora exportada\nexport async function consultarTodos(token) {\n    const resposta = await fetch(urlBase, {\n        method: \"GET\",\n        headers: { \n            \"Authorization\": token\n        },\n        credentials: 'include'\n    });\n    return await resposta.json();\n}\n\n\n\nexport async function buscarDepartamentos(token) {\n    const resposta = await fetch(urlBase, {\n        method: \"GET\",\n        headers: {\n            \"Authorization\": token,\n            \"Content-Type\": \"application/json\"\n        }\n    });\n\n    if (!resposta.ok) {\n        throw new Error(\"Erro ao buscar departamentos\");\n    }\n\n    return await resposta.json();\n}\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,oCAAoC;AAEpD,OAAO,eAAeC,MAAMA,CAACC,YAAY,EAAEC,KAAK,EAAE;EAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;EACrC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;AAEA,OAAO,eAAeC,OAAOA,CAACX,YAAY,EAAEC,KAAK,EAAE;EAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE,SAAS;IACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;EACrC,CAAC,CAAC;EACF,OAAO,MAAME,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;AAEA,OAAO,eAAeE,OAAOA,CAACC,MAAM,EAAEZ,KAAK,EAAE;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIe,MAAM,EAAE,EAAE;IACjDT,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE;MACL,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMJ,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;;AAEA;AACA,OAAO,eAAeI,cAAcA,CAACb,KAAK,EAAE;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAEJ;IACrB,CAAC;IACDK,WAAW,EAAE;EACjB,CAAC,CAAC;EACF,OAAO,MAAMJ,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC;AAIA,OAAO,eAAeK,mBAAmBA,CAACd,KAAK,EAAE;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;IAClCM,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACL,eAAe,EAAEJ,KAAK;MACtB,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACc,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACnD;EAEA,OAAO,MAAMf,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}