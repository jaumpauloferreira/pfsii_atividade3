{"ast":null,"code":"const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      credentials: 'include',\n      body: JSON.stringify(funcionario)\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ao gravar: ${resposta.status} ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(erro);\n    throw erro; // Repassa o erro para o chamador\n  }\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": token\n      },\n      credentials: 'include',\n      body: JSON.stringify(funcionario)\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ao alterar: ${resposta.status} ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(erro);\n    throw erro; // Repassa o erro para o chamador\n  }\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n  try {\n    const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": token\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ao excluir: ${resposta.status} ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(erro);\n    throw erro; // Repassa o erro para o chamador\n  }\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n  try {\n    const resposta = await fetch(urlBase, {\n      method: \"GET\",\n      headers: {\n        \"Authorization\": token\n      },\n      credentials: 'include'\n    });\n    if (!resposta.ok) {\n      throw new Error(`Erro ao consultar funcionários: ${resposta.status} ${resposta.statusText}`);\n    }\n    return await resposta.json();\n  } catch (erro) {\n    console.error(erro);\n    throw erro; // Repassa o erro para o chamador\n  }\n}","map":{"version":3,"names":["urlBase","gravar","funcionario","token","resposta","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","status","statusText","json","erro","console","error","alterar","excluir","codigoFuncionario","consultarTodos"],"sources":["C:/Users/joaop/Desktop/Unoeste ADS/6-Sexto Bimestre/Programação Full Stack II/backup_at1/Atividade_1/pfsii_atividade3/frontend/src/servicos/funcionarioService.js"],"sourcesContent":["const urlBase = \"http://localhost:4000/funcionario\";\n\n// Função para gravar um novo funcionário (POST)\nexport async function gravar(funcionario, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"POST\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": token\n            },\n            credentials: 'include',\n            body: JSON.stringify(funcionario)\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ao gravar: ${resposta.status} ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(erro);\n        throw erro; // Repassa o erro para o chamador\n    }\n}\n\n// Função para alterar um funcionário existente (PUT)\nexport async function alterar(funcionario, token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"PUT\",\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": token\n            },\n            credentials: 'include',\n            body: JSON.stringify(funcionario)\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ao alterar: ${resposta.status} ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(erro);\n        throw erro; // Repassa o erro para o chamador\n    }\n}\n\n// Função para excluir um funcionário (DELETE)\nexport async function excluir(codigoFuncionario, token) {\n    try {\n        const resposta = await fetch(`${urlBase}/${codigoFuncionario}`, {\n            method: \"DELETE\",\n            headers: { \n                \"Authorization\": token\n            },\n            credentials: 'include'\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ao excluir: ${resposta.status} ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(erro);\n        throw erro; // Repassa o erro para o chamador\n    }\n}\n\n// Função para consultar todos os funcionários (GET)\nexport async function consultarTodos(token) {\n    try {\n        const resposta = await fetch(urlBase, {\n            method: \"GET\",\n            headers: { \n                \"Authorization\": token\n            },\n            credentials: 'include'\n        });\n\n        if (!resposta.ok) {\n            throw new Error(`Erro ao consultar funcionários: ${resposta.status} ${resposta.statusText}`);\n        }\n\n        return await resposta.json();\n    } catch (erro) {\n        console.error(erro);\n        throw erro; // Repassa o erro para o chamador\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}